$ http = import("http")
$ fs = import("fs")
$ os = import("os")
-- TODO: verbose
$ port = % (os.getenv("PORT")) os.getenv("PORT"):tonum() | 8000

print("http://localhost:" + port)

$ mimes = {
	"aac": "audio/aac",
	"mp3": "audio/mpeg",
	"wav": "audio/wav",
	"ogg": "audio/ogg",
	"mid": "audio/midi",
	"midi": "audio/midi",
	"otf": "font/otf",
	"ttf": "font/ttf",
	"woff": "font/woff",
	"woff2": "font/woff2",
	"mp4": "video/mp4",
	"bmp": "image/bmp",
	"png": "image/png",
	"jpg": "image/jpeg",
	"jpeg": "image/jpeg",
	"webp": "image/webp",
	"gif": "image/gif",
	"css": "text/css",
	"htm": "text/html",
	"html": "text/html",
	"txt": "text/plain",
	"csv": "text/csv",
	"js": "text/javascript",
	"xml": "text/xml",
	"php": "text/php",
	"json": "application/json",
	"pdf": "application/pdf",
	"zip": "application/zip",
	"rtf": "application/rtf",
	"gz": "application/gzip",
	"wasm": "application/wasm",
}

$ www = {}

www.tag = ~ (tag, attrs, children) {
	$ html = "<" + tag
	attrs:each(~ (k, v) html += " " + k + "=" + v)
	% (children) {
		% (typeof(children) == "arr") {
			html += ">"
			children:each(~ (c) html += c)
			html += "</" + tag + ">"
		} | html += ">" + children + "</" + tag + ">"
	} | html += " />"
	~> html
}

www.styles = ~ (list) {

	$ css = ""

	$ compile_sheet = ~ (sheet) {
		$ code = "{"
		@ (key \ sheet) {
			% (typeof(sheet[key]) == "str") {
				code += key + ":" + sheet[key] + ";"
			} | {
				:( "cannot have a " + typeof(sheet[key]) + "here"
			}
		}
		~> code + "}"
	}

	@ (sel \ list) {
		$ post = ""
		$ style = list[sel]
		css += sel + "{"
		@ (key \ style) {
			% (typeof(style[key]) == "str") {
				css += key + ":" + style[key] + ";"
			} | (typeof(style[key]) == "map") {
				% (key[0] == ":") {
					post += sel + key + compile_sheet(style[key])
				}
			}
		}
		css += "}" + post
	}

	~> css

}

$ t = www.tag

www.static = ~ (path) {
	$ rpath = os.cwd() + path
	% (fs.isfile(rpath)) {
		$ ext = fs.ext(rpath)
		$ mime = mimes[ext]
		$ headers = {}
		% (mime) headers["Content-Type"] = mime
		~> {
			status: 200
			headers: headers
			body: fs.read(rpath)
		}
	} | (fs.isdir(rpath)) {
		~> {
			status: 200
			headers: {
				"Content-Type": "text/html"
			}
			body: t("html", {}, [
				t("head", {}, [
					t("title", {}, path)
					t("meta", { charset: "utf-8", })
					t("style", {}, www.styles({
						"*": {
							"font-family": "Monospace"
							"font-size": "16px"
							"text-decoration": "none"
						}
						"body": {
							"padding": "6px"
						}
						"li": {
							"list-style": "none"
						}
						"a": {
							"color": "blue"
							"outline": "none"
							":hover": {
								"color": "white"
								"background": "blue"
							}
						},
					}))
				]),
				t("body", {}, fs.readdir(rpath)
					:filter(~ (p) p[0] != ".")
					:sort()
					:sort(~ (a, b) fs.isdir(a))
					:map(~ (name) {
						~> t("li", {}, [
							t("a", {
								href: % (path == "/") path + name | path + "/" + name
							}, name)
						])
					})),
			])
		}
	} | {
		~> {
			status: 404
			body: "nope"
		}
	}
}

-- TODO: err handling in here
http.serve(port, ~ (req) {
	~> :) www.static(req.path) | ~ (e) {
		print("line #" + e.line + ": " + e.msg)
		~> {
			status: 500
			body: "err"
		}
	}
})
